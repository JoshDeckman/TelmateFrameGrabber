/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include <TelmateFrameGrabberImplFactory.hpp>
#include "TelmateFrameGrabberImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>
#include "MediaPipelineImpl.hpp"

#define GST_CAT_DEFAULT kurento_telmate_frame_grabber_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoTelmateFrameGrabberImpl"

namespace kurento
{
namespace module
{
namespace telmateframegrabber
{

TelmateFrameGrabberImpl::TelmateFrameGrabberImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) : OpenCVFilterImpl (config, std::dynamic_pointer_cast<MediaPipelineImpl> (mediaPipeline) )

{

    g_object_set (element, "filter-factory", "mFrameGrabberFilterImplOpenCV", NULL);
    g_object_get (G_OBJECT (element), "filter", &mFrameGrabberFilterImplOpenCV, NULL);

    if (mFrameGrabberFilterImplOpenCV == NULL) {
        throw KurentoException (MEDIA_OBJECT_NOT_AVAILABLE,
                                "Media Object not available");
    }

    g_object_set (mFrameGrabberFilterImplOpenCV, "target-object",
                  static_cast<kurento::TelmateFrameGrabberOpenCVImpl *> (this), NULL);

    g_object_unref (mFrameGrabberFilterImplOpenCV);


    GST_DEBUG("TelmateFrameGrabberImpl::TelmateFrameGrabberImpl()");

    /*std::string s = config.get<std::string>("name");
    GST_ERROR("NAME: %s",s.c_str());
*/


}
TelmateFrameGrabberImpl::~TelmateFrameGrabberImpl()
{
    mFrameGrabberFilterImplOpenCV = NULL;



}

MediaObjectImpl *
TelmateFrameGrabberImplFactory::createObject (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) const
{
  return new TelmateFrameGrabberImpl (config, mediaPipeline);
}

TelmateFrameGrabberImpl::StaticConstructor TelmateFrameGrabberImpl::staticConstructor;

TelmateFrameGrabberImpl::StaticConstructor::StaticConstructor()
{
  GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
                           GST_DEFAULT_NAME);
}

} /* telmateframegrabber */
} /* module */
} /* kurento */
