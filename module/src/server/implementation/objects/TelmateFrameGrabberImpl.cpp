/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include <TelmateFrameGrabberImplFactory.hpp>
#include "TelmateFrameGrabberImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>
#include "MediaPipelineImpl.hpp"

#define GST_CAT_DEFAULT kurento_telmate_frame_grabber_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoTelmateFrameGrabberImpl"

namespace kurento
{
namespace module
{
namespace telmateframegrabber
{

TelmateFrameGrabberImpl::TelmateFrameGrabberImpl(const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) : OpenCVFilterImpl (config, std::dynamic_pointer_cast<MediaPipelineImpl> (mediaPipeline))
{

}
TelmateFrameGrabberImpl::~TelmateFrameGrabberImpl()
{

}

int TelmateFrameGrabberImpl::getSnapInterval()
{
    return TelmateFrameGrabberOpenCVImpl::snapInterval;
}


void TelmateFrameGrabberImpl::setSnapInterval(int snapInterval) {
    TelmateFrameGrabberOpenCVImpl::snapInterval = snapInterval;
    return;
}

std::string TelmateFrameGrabberImpl::getStoragePath() {
    return TelmateFrameGrabberOpenCVImpl::storagePath;
}

void TelmateFrameGrabberImpl::setStoragePath(const std::string &path) {
    TelmateFrameGrabberOpenCVImpl::storagePath = path;
    return;
}

void TelmateFrameGrabberImpl::setWebRtcEpName(const std::string &epName) {
    TelmateFrameGrabberOpenCVImpl::epName = epName;
    return;
}

    MediaObjectImpl *
TelmateFrameGrabberImplFactory::createObject (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) const
{
  return new TelmateFrameGrabberImpl (config, mediaPipeline);
}

TelmateFrameGrabberImpl::StaticConstructor TelmateFrameGrabberImpl::staticConstructor;

TelmateFrameGrabberImpl::StaticConstructor::StaticConstructor()
{
  GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
                           GST_DEFAULT_NAME);
}

} /* telmateframegrabber */
} /* module */
} /* kurento */
